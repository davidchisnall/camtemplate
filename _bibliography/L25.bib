
@article{Chow:2013:IR:2534706.2534720,
 author = {Chow, Fred},
 title = {Intermediate Representation},
 journal = {Commun. ACM},
 issue_date = {December 2013},
 volume = {56},
 number = {12},
 month = dec,
 year = {2013},
 issn = {0001-0782},
 pages = {57--62},
 numpages = {6},
 url = {http://doi.acm.org/10.1145/2534706.2534720},
 doi = {10.1145/2534706.2534720},
 acmid = {2534720},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@inproceedings{Lattner:2004:LCF:977395.977673,
 author = {Lattner, Chris and Adve, Vikram},
 title = {LLVM: A Compilation Framework for Lifelong Program Analysis and Transformation},
 booktitle = {Proceedings of the International Symposium on Code Generation and Optimization: Feedback-directed and Runtime Optimization},
 series = {CGO '04},
 year = {2004},
 isbn = {0-7695-2102-9},
 location = {Palo Alto, California},
 pages = {75--},
 url = {http://dl.acm.org/citation.cfm?id=977395.977673},
 acmid = {977673},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 

@article{Cytron:1991:ECS:115372.115320,
 author = {Cytron, Ron and Ferrante, Jeanne and Rosen, Barry K. and Wegman, Mark N. and Zadeck, F. Kenneth},
 title = {Efficiently Computing Static Single Assignment Form and the Control Dependence Graph},
 journal = {ACM Trans. Program. Lang. Syst.},
 issue_date = {Oct. 1991},
 volume = {13},
 number = {4},
 month = oct,
 year = {1991},
 issn = {0164-0925},
 pages = {451--490},
 numpages = {40},
 url = {http://doi.acm.org/10.1145/115372.115320},
 doi = {10.1145/115372.115320},
 acmid = {115320},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {control dependence, control flow graph, def-use chain, dominator, optimizing compilers},
} 

@inproceedings{Bacon:2004:UTG:1028976.1028982,
 author = {Bacon, David F. and Cheng, Perry and Rajan, V. T.},
 title = {A Unified Theory of Garbage Collection},
 booktitle = {Proceedings of the 19th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications},
 series = {OOPSLA '04},
 year = {2004},
 isbn = {1-58113-831-8},
 location = {Vancouver, BC, Canada},
 pages = {50--68},
 numpages = {19},
 url = {http://doi.acm.org/10.1145/1028976.1028982},
 doi = {10.1145/1028976.1028982},
 acmid = {1028982},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {graph algorithms, mark-and-sweep, reference counting, tracing},
} 

@inproceedings{Tene:2011:CCC:1993478.1993491,
 author = {Tene, Gil and Iyengar, Balaji and Wolf, Michael},
 title = {C4: The Continuously Concurrent Compacting Collector},
 booktitle = {Proceedings of the International Symposium on Memory Management},
 series = {ISMM '11},
 year = {2011},
 isbn = {978-1-4503-0263-0},
 location = {San Jose, California, USA},
 pages = {79--88},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1993478.1993491},
 doi = {10.1145/1993478.1993491},
 acmid = {1993491},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {concurrent, garbage collection, genera- tional, linux, pauseless, read barrier, virtual memory},
} 

@article{Bacon:2013:PRG:2502508.2502523,
 author = {Bacon, David F. and Cheng, Perry and Rajan, V. T.},
 title = {POPL 2003: A Real-time Garbage Collector with Low Overhead and Consistent Utilization},
 journal = {SIGPLAN Not.},
 issue_date = {April 2013},
 volume = {48},
 number = {4S},
 month = jul,
 year = {2013},
 issn = {0362-1340},
 pages = {58--71},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/2502508.2502523},
 doi = {10.1145/2502508.2502523},
 acmid = {2502523},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {defragmentation, read barrier, real-time scheduling, utilization},
} 

@misc{citeulike:1903110,
    abstract = {{: Polymorphic inline caches (PICs) provide a new way to reduce the overhead of polymorphic
message sends by extending inline caches to include more than one cached lookup result per call site. For
a set of typical object-oriented SELF programs, PICs achieve a median speedup of 11\%.
As an important side effect, PICs collect type information by recording all of the receiver types actually used
at a given call site. The compiler can exploit this type information to generate better code when...}},
    author = {Hölzle, Urs and Chambers, Craig and Ungar, David},
    keywords = {dynamictyping, oo, optimization, self},
    posted-at = {2007-11-12 15:33:30},
    priority = {4},
    title = {{Optimizing Dynamically-Typed Object-Oriented Languages with Polymorphic Inline Caches}},
    pdf = {http://www.selflanguage.org/_static/published/pics.pdf},
    year = {1991}
}

@misc{cxxabi,
  title = {Itanium C++ ABI},
  howpublished = {https://mentorembedded.github.io/cxx-abi/abi.html},
  url = {https://mentorembedded.github.io/cxx-abi/abi.html}
}

@misc{jvm,
  title = {The Java Virtual Machine Specification},
  authors = {Tim Lindholm and Frank Yellin and Gilad Bracha and Alex Buckley},
  url = {http://docs.oracle.com/javase/specs/jvms/se7/html/index.html}
}

@mastersthesis{polly,
  title= {Enabling Polyhedral Optimizations in LLVM},
  school = {Universität Passau},
  address = {Germany},
  month = {April},
  year = {2011},
  author = {Tobias Grosser},
  pdf = {http://www.grosser.es/publications/grosser-2011--Enabling-Polyhedral-Optimizations-in-LLVM--diplomathesis.pdf}
}

@inproceedings{Larsen:2000:ESL:349299.349320,
 author = {Larsen, Samuel and Amarasinghe, Saman},
 title = {Exploiting Superword Level Parallelism with Multimedia Instruction Sets},
 booktitle = {Proceedings of the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation},
 series = {PLDI '00},
 year = {2000},
 isbn = {1-58113-199-2},
 location = {Vancouver, British Columbia, Canada},
 pages = {145--156},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/349299.349320},
 doi = {10.1145/349299.349320},
 acmid = {349320},
 publisher = {ACM},
 address = {New York, NY, USA},
} 


@INPROCEEDINGS{PSLP, 
author={Porpodas, V. and Magni, A. and Jones, T.M.}, 
booktitle={Code Generation and Optimization (CGO), 2015 IEEE/ACM International Symposium on}, 
title={PSLP: Padded SLP automatic vectorization}, 
year={2015}, 
month={Feb}, 
pages={190-201}, 
pdf={http://www.cl.cam.ac.uk/~tmj32/papers/docs/porpodas15-cgo.pdf},
abstract={The need to increase performance and power efficiency in modern processors has led to a wide adoption of SIMD vector units. All major vendors support vector instructions and the trend is pushing them to become wider and more powerful. However, writing code that makes efficient use of these units is hard and leads to platform-specific implementations. Compiler-based automatic vectorization is one solution for this problem. In particular the Superword-Level Parallelism (SLP) vectorization algorithm is the primary way to automatically generate vector code starting from straight-line scalar code. SLP is implemented in all major compilers, including GCC and LLVM. SLP relies on finding sequences of isomorphic instructions to pack together into vectors. However, this hinders the applicability of the algorithm as isomorphic code sequences are not common in practice. In this work we propose a solution to overcome this limitation. We introduce Padded SLP (PSLP), a novel vectorization algorithm that can vectorize code containing non-isomorphic instruction sequences. It injects a near-minimal number of redundant instructions into the code to transform non-isomorphic sequences into isomorphic ones. The padded instruction sequence can then be successfully vectorized. Our experiments show that PSLP improves vectorization coverage across a number of kernels and full benchmarks, decreasing execution time by up to 63%.}, 
keywords={parallel processing;program compilers;support vector machines;PSLP;SIMD vector units;compiler-based automatic vectorization;isomorphic instructions;nonisomorphic instruction sequences;padded SLP automatic vectorization;straight-line scalar code;superword-level parallelism vectorization algorithm;vectorization algorithm;vendors support vector instructions;writing code;Algorithm design and analysis;Assembly;Educational institutions;Parallel processing;Program processors;Registers;Vectors}, 
doi={10.1109/CGO.2015.7054199},}

@inproceedings{Bala:2000:DTD:349299.349303,
 author = {Bala, Vasanth and Duesterwald, Evelyn and Banerjia, Sanjeev},
 title = {Dynamo: A Transparent Dynamic Optimization System},
 booktitle = {Proceedings of the ACM SIGPLAN 2000 Conference on Programming Language Design and Implementation},
 series = {PLDI '00},
 year = {2000},
 isbn = {1-58113-199-2},
 location = {Vancouver, British Columbia, Canada},
 pages = {1--12},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/349299.349303},
 doi = {10.1145/349299.349303},
 acmid = {349303},
 publisher = {ACM},
 address = {New York, NY, USA},
} 


@inproceedings{Gal:2009:TJT:1542476.1542528,
 author = {Gal, Andreas and Eich, Brendan and Shaver, Mike and Anderson, David and Mandelin, David and Haghighat, Mohammad R. and Kaplan, Blake and Hoare, Graydon and Zbarsky, Boris and Orendorff, Jason and Ruderman, Jesse and Smith, Edwin W. and Reitmaier, Rick and Bebenita, Michael and Chang, Mason and Franz, Michael},
 title = {Trace-based Just-in-time Type Specialization for Dynamic Languages},
 booktitle = {Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 series = {PLDI '09},
 year = {2009},
 isbn = {978-1-60558-392-1},
 location = {Dublin, Ireland},
 pages = {465--478},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/1542476.1542528},
 doi = {10.1145/1542476.1542528},
 acmid = {1542528},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dynamically typed languages, trace-based compilation},
} 

